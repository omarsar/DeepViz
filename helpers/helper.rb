require 'json'
require 'http'

# module for helper function
module Helpers

  # function to prepare timeline data (bipolar first , then bpd)
  def prepare_timeline_data(data)
    timeline = []
    data.each do |r|
      timeline << [DateTime.parse(r[0]).to_time.to_i*1000,r[1]]
    end
    puts timeline
    timeline
  end

	# function to return the word counts
	def bpd_word_count(data)
		word_count = []
		word_count_scaled = []

		data.each do |row|
			word_count << {"text" => row[0], "size" => row[1]}
		end

		# scaling for word cloud
		word_count = word_count.reverse

		new_max = 20.0
		new_min = 1.0

		firstword = word_count.first
		lastword = word_count.last

		old_range = word_count.last['size'].to_i - word_count.first['size'].to_i
		new_range = new_max - new_min

		word_count_scaled << {"text" => firstword['text'], "size" => 1}

		word_count.slice(1..-2).each do |word|
			new_value = (((word['size'].to_i - word_count.first['size'].to_i) * new_range)/old_range) + new_min
			word_count_scaled << {"text" => word['text'], "size" => new_value}
		end

		word_count_scaled << {"text" => lastword['text'], "size" => 10}

		word_count_scaled.to_json
	end

	# generate the overlap between the the queried users and patients
	def overlap_words(normal, patient)
		found_words = []
		normal_count = []
		patient_count = []
		normal.each do |row|
			if patient.map(&:first).include? row[0]
				found_words << row[0]
				normal_count << row[1]
				# search over the patient to look for that same key (word)
				patient.each do |x,y|
					if x == row[0]
						patient_count << y
					end
				end
				# have to get the values for the other two arrays
			end
		end

		return [found_words, normal_count, patient_count]
	end

	def getTweetsPolarityRatio(positive_ratio, negative_ratio)
    [
      positive_ratio,
      1 - positive_ratio - negative_ratio,
      negative_ratio
    ]
  end

	# return a Bipolar candidate, randomly
	def get_bipolar()
		bipolar_patients = [225852588, 1523189252, 598856733, 608962592, 296166433, 16284706, 1956375589, 1107458226, 973227060, 2534848567, 22551612, 2634699844, 3362598982, 418408523, 240034893, 999428179, 826747988, 2873332822, 468366424, 116822107, 2997792101, 21092452, 2521396327, 1965159528, 236269677, 612987752, 80409724, 1472446590, 1369611404, 275718291, 3044144277, 537878682, 3071585439, 18064547, 2808969381, 1040789676, 1419858097, 2480699582, 1344779467, 1566058700, 2871874765, 586255574, 245219549, 2879552746, 997584109, 890409216, 2302976264, 2687654158, 1104536850, 1087659283, 1147083032, 1223074080, 384487714, 2699715876, 1941395749, 3301098796, 478091568, 2997538097, 2754306367, 259181892, 2950023496, 779130192, 312914266, 1096422758, 3353686378, 13009262, 311756151, 2711712128, 1431297410, 16081286, 221353356, 964256144, 2976785207, 2827170195, 108637252, 3293205915, 47967647, 2351302048, 1287172507, 951487916, 85176749, 51012014, 605200816, 149463624, 404322747, 20557244, 851091902, 2195611076, 449616665, 1352465874, 1434508758, 2659042212, 590388700, 1695357414, 2787124722, 1499293171, 222047488, 34318852, 955956744, 2357181962, 2337393168, 135964180, 2830685717, 60524054, 1599439393, 275984930, 2253016615, 92502577, 78240308, 859243062, 1689516600, 2925223485, 2933232196, 236482117, 3196047943, 2179200584, 545525516, 3047890520, 3178041952, 2975297152, 20194945, 761451138, 53754646, 523597454, 942202136, 493569687, 35486369, 270461605, 2325477030, 1171197608, 2531639068, 89842347, 3027488429, 562501294, 749849264, 1157997235, 3375417016, 1680938684, 45728445, 844221126, 28910279, 3283787468, 501824802, 1974223567, 2773499605, 1074974424, 620017370, 335988448, 2914552553, 220497652, 598213371, 2402038525, 561379072, 21823233, 464961283, 1615874822, 439179905, 1198315274, 139908880, 2173474581, 123687707, 2424064796, 546805534, 67405445, 995198754, 2874378024, 60079580, 30621487, 859332414, 1112651587, 1357902660, 2775696182, 3231349576, 23874379, 2347690564, 630949721, 143616860, 2844949343, 2320312174, 1257706351, 2200418160, 184095624, 581988233, 2767717274, 977449884, 1045167511, 386464679, 240864176, 1222900213, 325980108, 1435697101, 3254195151, 496109521, 2732336092, 134246394, 3049541599, 35887077, 2515279847, 55588847, 451615743]
		bipolar_patients.sample
	end

	# return a BPD candidate, randomly
	def get_bpd()
		bpd_patients = [225852588, 1523189252, 598856733, 608962592, 296166433, 16284706, 1956375589, 1107458226, 973227060, 2534848567, 22551612, 2634699844, 3362598982, 418408523, 240034893, 999428179, 826747988, 2873332822, 468366424, 116822107, 2997792101, 21092452, 2521396327, 1965159528, 236269677, 612987752, 80409724, 1472446590, 1369611404, 275718291, 3044144277, 537878682, 3071585439, 18064547, 2808969381, 1040789676, 1419858097, 2480699582, 1344779467, 1566058700, 2871874765, 586255574, 245219549, 2879552746, 997584109, 890409216, 2302976264, 2687654158, 1104536850, 1087659283, 1147083032, 1223074080, 384487714, 2699715876, 1941395749, 3301098796, 478091568, 2997538097, 2754306367, 259181892, 2950023496, 779130192, 312914266, 1096422758, 3353686378, 13009262, 311756151, 2711712128, 1431297410, 16081286, 221353356, 964256144, 2976785207, 2827170195, 108637252, 3293205915, 47967647, 2351302048, 1287172507, 951487916, 85176749, 51012014, 605200816, 149463624, 404322747, 20557244, 851091902, 2195611076, 449616665, 1352465874, 1434508758, 2659042212, 590388700, 1695357414, 2787124722, 1499293171, 222047488, 34318852, 955956744, 2357181962, 2337393168, 135964180, 2830685717, 60524054, 1599439393, 275984930, 2253016615, 92502577, 78240308, 859243062, 1689516600, 2925223485, 2933232196, 236482117, 3196047943, 2179200584, 545525516, 3047890520, 3178041952, 2975297152, 20194945, 761451138, 53754646, 523597454, 942202136, 493569687, 35486369, 270461605, 2325477030, 1171197608, 2531639068, 89842347, 3027488429, 562501294, 749849264, 1157997235, 3375417016, 1680938684, 45728445, 844221126, 28910279, 3283787468, 501824802, 1974223567, 2773499605, 1074974424, 620017370, 335988448, 2914552553, 220497652, 598213371, 2402038525, 561379072, 21823233, 464961283, 1615874822, 439179905, 1198315274, 139908880, 2173474581, 123687707, 2424064796, 546805534, 67405445, 995198754, 2874378024, 60079580, 30621487, 859332414, 1112651587, 1357902660, 2775696182, 3231349576, 23874379, 2347690564, 630949721, 143616860, 2844949343, 2320312174, 1257706351, 2200418160, 184095624, 581988233, 2767717274, 977449884, 1045167511, 386464679, 240864176, 1222900213, 325980108, 1435697101, 3254195151, 496109521, 2732336092, 134246394, 3049541599, 35887077, 2515279847, 55588847, 451615743]
		bpd_patients.sample
	end

	# Retrive user data function
	def getUserData(radio, username, api_url)
    if radio == "username"
      return HTTParty.get(api_url + "predict_json_by_name?screen_name=#{username}")
    else
      if radio == "bd"
        res = HTTParty.get(api_url + "predict_json_by_id?user_id=#{get_bipolar()}")
        res['profile']['name'] = "Bipolar Patient"
        res['profile']['screen_name'] = 'randomBipolarPatient'
      else
        res = HTTParty.get(api_url + "predict_json_by_id?user_id=#{get_bpd()}")
        res['profile']['name'] = "BPD Patient"
        res['profile']['screen_name'] = 'randomBPDPatient'
      end
      res['profile']['profile_image_url'] = 'https://pixabay.com/static/uploads/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'
      res['profile']['profile_banner_url'] = 'https://pbs.twimg.com/profile_banners/6253282/1431474710/1500x500'
      res['profile']['description'] = ''
    end
    res
  end

  # decide the API URL
  def setapi(master, slave)
    default = master
    begin
      response = HTTP.post(default)
      if response.code == 200
        return master
      else
        return slave
      end
    rescue
      return slave
    end
  end
end
